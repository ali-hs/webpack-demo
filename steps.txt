install webpack
npm install webpack -D

create structure of the app
app/
- index.js
- component.js
build/

to create a html template we can install html-web-pack plugin
npm instal html-webpack-plugin -D

create webpack.config.js

to run webpack easily, add it as npm script
"build": "webpack"

--------Automatic browser refresh on changes---------
install webpack dev server
npm install webpack-dev-server -D

add npm script in package.json to launch webpack dev server
"start": "webpack-dev-server --env development",
"build": "webpack --env production"

At this stage changes in code and save should auto refresh the app in the browser.

Changes in webapack.config.js requires to restart the dev server
To handle this case we can use nodemon plugin that watches for changes in this file and auto restart the webpack-dev-server
npm install nodemon -D
change the package.json and update "start" script in
"start": "nodemon --watch webpack.config.js --exec\"webpack-dev-server --env development\""

----------HMR--------------------
separate configrations for development and production.

devServer configurations for HMR.

Need to explicitly add support for it in code or use libraries which has default support for it.
e.g. redux, react etc.

---------Linting-----------------
install eslint using the following command.
npm install eslint -D

install eslint-loader that will be called by webpack during bundling.
npm install eslint-loader -D

its probably better to add eslint as precommit hook as otherwise it might slow down the bulding time.

We can enforce same configs using .editorconfig file which most of the IDE's and editors support.

---------Composing configurations---------------

install webpack-merge plugin to merge configurations from smaller parts.
we can split configurations in multiple parts and compose those parts to make a meaningful webpack config file.

--------Loading styles-----------------
install css-loader and style-loader

css-loader treats all matching imports and @url as regular es6 imports.

style-loader picks up the output of css-loader and injects css into the resulting bundle. This will be inlined javascript by default, and it implements the HMR interface.
For production use ExtractTextPlugin to generate separate css file.
